generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  username      String   @unique
  email         String   @unique
  name          String?
  firstName     String?
  lastName      String?
  emailVerified Boolean  @default(false)
  role          Role     @default(learner)
  password      String
  createdAt     DateTime @default(now())
  enrollments   Enrollment[]
  payments      Payment[]
}
model PendingUser {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(learner)
  otp       String
  otpExpiry DateTime
  createdAt DateTime @default(now())
}

model Course {
  id                String   @id @default(cuid())
  title             String
  description       String?
  priceCents        Int      @default(0)
  moodleCourseId    Int?
  published         Boolean  @default(false)
  createdAt         DateTime @default(now())
  duration          String?
  whatYouWillLearn  String?
  whoIsFor          String?
  img               String?
  enrollments       Enrollment[]
}

model Enrollment {
  id                 String   @id @default(cuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  course             Course   @relation(fields: [courseId], references: [id])
  courseId           String
  status             EnrollmentStatus @default(active)
  progressPercent    Int      @default(0)
  moodleEnrollmentId Int?
  createdAt          DateTime @default(now())
}

model Payment {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  amountCents Int
  currency    String  @default("gbp")
  status      PaymentStatus @default(pending)
  provider    String
  providerId  String?
  createdAt   DateTime @default(now())
}

model OAuthClient {
  clientId     String   @id
  clientSecret String?
  redirectUris Json      // JSON array of URIs
  grantTypes   Json      // JSON array of grant types (e.g. ["authorization_code"])
  createdAt    DateTime @default(now())
}

model AuthorizationCode {
  code                String   @id
  clientId            String
  redirectUri         String
  userId              String
  scope               String?
  state               String?
  codeChallenge       String?   // PKCE code challenge (if provided)
  codeChallengeMethod String?   
  expiresAt           DateTime
  createdAt           DateTime @default(now())
}

model OidcKey {
  kid        String @id
  publicKey  String // JWK JSON string
  privateKey String // PEM
  createdAt  DateTime @default(now())
}
enum Role {
  admin
  learner
  employer
}

enum EnrollmentStatus {
  active
  completed
  pending
}

enum PaymentStatus {
  succeeded
  failed
  pending
}
